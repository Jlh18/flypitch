import fol set_theory.zfc set_theory.ordinal order.boolean_algebra order.complete_boolean_algebra tactic.rewrite tactic.monotonicity .to_mathlib tactic.monotonicity bv_prf

local infix ` ‚üπ `:65 := lattice.imp

local infix ` ‚áî `:50 := lattice.biimp

-- uncomment in case of emergency
-- @[tidy] meta def big_bertha : tactic unit := `[finish]

namespace tactic.interactive
section natded_tactics
open lean.parser lean tactic tactic.interactive interactive.types interactive
local postfix `?`:9001 := optional
meta def bv_intro : parse ident_? ‚Üí tactic unit
| none := propagate_tags (`[apply le_infi] >> intro1 >> tactic.skip)
| (some n) := propagate_tags (`[apply lattice.le_infi] >> tactic.intro n >> tactic.skip)

meta def ac_change (r : parse texpr) : tactic unit :=
do 
   v‚ÇÅ <- mk_mvar,
   v‚ÇÇ <- mk_mvar,
   refine ``(eq.mpr %%v‚ÇÅ (%%v‚ÇÇ : %%r)),
   gs <- get_goals,
   set_goals (list.cons v‚ÇÅ list.nil),
   -- `[try{simp only [bv_eq_symm]}],
   try ac_refl,
   gs' <- get_goals,
   set_goals $ gs' ++ gs

-- example {Œ± : Type*} [lattice.boolean_algebra Œ±] {a‚ÇÅ a‚ÇÇ a‚ÇÉ a‚ÇÑ : Œ±} :
--   (a‚ÇÅ ‚äî a‚ÇÇ) ‚äî (a‚ÇÉ ‚äî a‚ÇÑ) = ‚ä§
-- :=
-- begin
--   ac_change a‚ÇÅ ‚äî (a‚ÇÇ ‚äî a‚ÇÉ ‚äî a‚ÇÑ) = ‚ä§,
-- -- Œ± : Type ?,
-- -- _inst_1 : lattice.boolean_algebra Œ±,
-- -- a‚ÇÅ a‚ÇÇ a‚ÇÉ a‚ÇÑ : Œ±
-- -- ‚ä¢ a‚ÇÅ ‚äî (a‚ÇÇ ‚äî a‚ÇÉ ‚äî a‚ÇÑ) = ‚ä§
-- end
   
end natded_tactics
end tactic.interactive

namespace lattice

section natded
variables {ùîπ : Type*} [complete_boolean_algebra ùîπ]

lemma supr_imp_eq {Œπ : Type*} {s : Œπ ‚Üí ùîπ} {b : ùîπ} :
  (‚®Ü(i:Œπ), s i) ‚üπ b = (‚®Ö(i:Œπ), s i ‚üπ b) :=
by {unfold imp, rw[neg_supr, infi_sup_eq]}

lemma bv_Or_elim  {Œπ : Type*} {s : Œπ ‚Üí ùîπ} {c : ùîπ} :
(‚àÄ i : Œπ, (s i ‚â§ c)) ‚Üí ((‚®Ü(i:Œπ), s i) ‚â§ c) :=
Œª H, by apply supr_le; from H

lemma bv_And_intro {Œπ : Type*} {s : Œπ ‚Üí ùîπ} {b c : ùîπ} :
(‚àÄ i : Œπ, (c ‚â§ s i)) ‚Üí (c ‚â§ ‚®Ö(i:Œπ), s i) :=
Œª H, by {apply le_infi, from H} -- this is superceded by tactic.interactive.bv_intro

lemma bv_or_elim {b‚ÇÅ b‚ÇÇ c : ùîπ} {h : b‚ÇÅ ‚â§ c} {h' : b‚ÇÇ ‚â§ c} : b‚ÇÅ ‚äî b‚ÇÇ ‚â§ c :=
  by apply sup_le; assumption

lemma bv_or_elim_left {b‚ÇÅ b‚ÇÇ c d : ùîπ} {h‚ÇÅ : b‚ÇÅ ‚äì d ‚â§ c} {h‚ÇÇ : b‚ÇÇ ‚äì d ‚â§ c} : (b‚ÇÅ ‚äî b‚ÇÇ) ‚äì d ‚â§ c :=
  by {rw[deduction], apply bv_or_elim; finish}

lemma bv_or_elim_right {b‚ÇÅ b‚ÇÇ c d : ùîπ} {h‚ÇÅ : d ‚äì b‚ÇÅ ‚â§ c} {h‚ÇÇ : d ‚äì b‚ÇÇ ‚â§ c} : d ‚äì (b‚ÇÅ ‚äî b‚ÇÇ) ‚â§ c :=
  by {rw[inf_comm] at ‚ä¢ h‚ÇÅ h‚ÇÇ; apply bv_or_elim_left; assumption}

lemma bv_exfalso {a b : ùîπ} {h : a ‚â§ ‚ä•} : a ‚â§ b :=
by finish

lemma bv_cases_left {Œπ : Type*} {s : Œπ ‚Üí ùîπ} {c b : ùîπ} {h : ‚àÄ i : Œπ, (s i ‚äì c ‚â§ b)} :
  ((‚®Ü(i:Œπ), s i) ‚äì c) ‚â§ b :=
by finish[deduction]

lemma bv_cases_right {Œπ : Type*} {s : Œπ ‚Üí ùîπ} {c b : ùîπ} {h : ‚àÄ i : Œπ, (c ‚äì s i ‚â§ b)} :
  (c ‚äì (‚®Ü(i:Œπ), s i)) ‚â§ b :=
by {rw[inf_comm], apply bv_cases_left, finish}

lemma bv_specialize {Œπ : Type*} {s : Œπ ‚Üí ùîπ} (i : Œπ) {b : ùîπ} {h : s i ‚â§ b} :
(‚®Ö(i:Œπ), s i) ‚â§ b := infi_le_of_le i h

lemma bv_specialize_left {Œπ : Type*} {s : Œπ ‚Üí ùîπ} {c b : ùîπ} (i : Œπ)
  {h : s i ‚äì c ‚â§ b} : (‚®Ö(i:Œπ), s i) ‚äì c ‚â§ b :=
by {rw[deduction], apply bv_specialize i, rwa[<-deduction]}

lemma bv_specialize_right {Œπ : Type*} {s :Œπ ‚Üí ùîπ} {c b : ùîπ} (i : Œπ)
  {h : c ‚äì s i ‚â§ b} : c ‚äì (‚®Ö(i:Œπ), s i) ‚â§ b :=
by {rw[inf_comm], apply bv_specialize_left i, finish}
  
@[ematch] lemma bv_imp_elim {a b : ùîπ} : (a ‚üπ b) ‚äì a ‚â§ b :=
by simp[imp, inf_sup_right]

@[ematch] lemma bv_imp_elim' {a b : ùîπ} : (a ‚üπ b) ‚äì a ‚â§ a ‚äì b :=
by {simp[imp, inf_sup_right]}

lemma bv_and_intro {a b‚ÇÅ b‚ÇÇ : ùîπ} (h‚ÇÅ : a ‚â§ b‚ÇÅ) (h‚ÇÇ : a ‚â§ b‚ÇÇ) : a ‚â§ b‚ÇÅ ‚äì b‚ÇÇ := le_inf h‚ÇÅ h‚ÇÇ

@[ematch] lemma from_empty_context {a b : ùîπ} (h : ‚ä§ ‚â§ b) : a ‚â§ b :=
  by refine le_trans _ h; apply le_top

lemma bv_imp_intro {a b c : ùîπ} {h : a ‚äì b ‚â§ c} :
  a ‚â§ b ‚üπ c := by rwa[deduction] at h

lemma bv_have {a b c : ùîπ} (h : a ‚â§ b) {h' : a ‚äì b ‚â§ c} : a ‚â§ c :=
by {rw[show a = a ‚äì a, by simp], apply le_trans, apply inf_le_inf, refl, exact h, exact h'}

lemma bv_use {Œπ : Type*} (i : Œπ) {s : Œπ ‚Üí ùîπ} {b : ùîπ}  {h : b ‚â§ s i} : b ‚â§ ‚®Ü(j:Œπ), s j :=
  le_supr_of_le i h

end natded
end lattice

open lattice

universe u

namespace pSet

/-- If two pre-sets `x` and `y` are not equivalent, then either there exists a member of x
which is not equivalent to any member of y, or there exists a member of y which is not
equivalent to any member of x -/
lemma not_equiv {x y : pSet} (h_neq : ¬¨ pSet.equiv x y) :
  (‚àÉ a : x.type, ‚àÄ a' : y.type, ¬¨ pSet.equiv (x.func a) (y.func a')) ‚à®
  (‚àÉ a' : y.type, ‚àÄ a : x.type, ¬¨ pSet.equiv (x.func a) (y.func a')) :=
begin
  cases x, cases y, unfold equiv, safe,
  suffices : equiv (mk x_Œ± x_A) (mk y_Œ± y_A), by contradiction,
  constructor; assumption
end

end pSet


/- A ùîπ-valued model of ZFC -/

-- œÑ is a B-name if and only if œÑ is a set of pairs of the form ‚ü®œÉ, b‚ü©, where œÉ is
-- a B-name and b ‚àà B.
inductive bSet (ùîπ : Type u) [complete_boolean_algebra ùîπ] : Type (u+1)
| mk (Œ± : Type u) (A : Œ± ‚Üí bSet) (B : Œ± ‚Üí ùîπ) : bSet

namespace bSet
variables {ùîπ : Type u} [nontrivial_complete_boolean_algebra ùîπ]

noncomputable instance decidable_eq_ùîπ : decidable_eq ùîπ := Œª _ _, classical.prop_decidable _

run_cmd mk_simp_attr `cleanup

/-- The underlying type of a bSet -/
@[simp, cleanup]def type : bSet ùîπ ‚Üí Type u
| ‚ü®Œ±, _, _‚ü© := Œ±

@[simp, cleanup]lemma type_infi {Œ± : Type*} {A : Œ± ‚Üí bSet ùîπ} {B C : Œ± ‚Üí ùîπ} : (‚®Ö(a : type (mk Œ± A B)), C a) = ‚®Ö(a : Œ±), C a := by refl

@[simp, cleanup]lemma type_supr {Œ± : Type*} {A : Œ± ‚Üí bSet ùîπ} {B C : Œ± ‚Üí ùîπ} : (‚®Ü(a : type (mk Œ± A B)), C a) = ‚®Ü(a : Œ±), C a := by refl

/-- The indexing function of a bSet -/
@[simp, cleanup]def func : ‚àÄ x : bSet ùîπ, x.type ‚Üí bSet ùîπ
| ‚ü®_, A, _‚ü© := A

/-- The boolean truth-value function of a bSet -/
@[simp, cleanup]def bval : ‚àÄ x : bSet ùîπ, x.type ‚Üí ùîπ
| ‚ü®_, _, B‚ü© := B

@[simp, cleanup]def mk_type_func_bval : ‚àÄ x : bSet ùîπ, mk x.type x.func x.bval = x :=
  Œª x, by induction x; {simp only with cleanup, repeat{split, repeat{refl}}}

def empty : bSet ùîπ :=
  ‚ü®ulift empty, empty.elim ‚àò ulift.down, empty.elim ‚àò ulift.down‚ü©

instance nonempty_bSet : nonempty $ @bSet ùîπ _ :=
  ‚ü®empty‚ü©

instance has_empty_bSet : has_emptyc (bSet ùîπ) := ‚ü®empty‚ü©

@[simp]lemma forall_over_empty (œï : (type (‚àÖ : bSet ùîπ)) ‚Üí ùîπ) : (‚®Öa, œï a) = ‚ä§ :=
  by {apply top_unique, bv_intro a, repeat{cases a}}

@[simp]lemma exists_over_empty (œï : (type (‚àÖ : bSet ùîπ)) ‚Üí ùîπ) : (‚®Üa, œï a) = ‚ä• :=
 by {apply bot_unique, apply bv_Or_elim, intro i, repeat{cases i}}

/-- Two Boolean-valued pre-sets are extensionally equivalent if every
element of the first family is extensionally equivalent to
  some element of the second family and vice-versa. -/
@[reducible]def bv_eq : ‚àÄ (x y : bSet ùîπ), ùîπ
/- ‚àÄ x ‚àÉ y, m x y ‚àß ‚àÄ y ‚àÉ x, m y x, but this time in ~lattice~ -/
| ‚ü®Œ±, A, B‚ü© ‚ü®Œ±', A', B'‚ü© :=
             (‚®Öa : Œ±, B a ‚üπ ‚®Üa', B' a' ‚äì bv_eq (A a) (A' a')) ‚äì
               (‚®Öa' : Œ±', B' a' ‚üπ ‚®Üa, B a ‚äì bv_eq (A a) (A' a'))

infix ` =·¥Æ `:80 := bv_eq

theorem bv_eq_refl_empty : (@bv_eq ùîπ _) (empty) (empty) = ‚ä§ :=
  by unfold empty bv_eq;
  {simp only [lattice.inf_eq_top_iff, lattice.infi_eq_top], fsplit; intros i; cases i; cases i}

open lattice

@[simp]theorem bv_eq_refl : ‚àÄ x, @bv_eq ùîπ _ x x = ‚ä§ :=
begin
  intro x, induction x, simp[bv_eq, -imp_top_iff_le], split; intros;
  {apply top_unique, simp, apply le_supr_of_le i, have := x_ih i, finish}
end

/- empty' is the singleton bSet {‚ü®‚àÖ, ‚ä•‚ü©}, i.e. a set whose only member is ‚àÖ which has
   a zero probability of actually being an element. It should be equivalent to ‚àÖ. -/
@[reducible]def empty' : bSet ùîπ := mk punit (Œª _, ‚àÖ) (Œª _, ‚ä•)

example : empty =·¥Æ empty = (‚ä§ : ùîπ) := by simp

/-- `x ‚àà y` as Boolean-valued pre-sets if `x` is extensionally equivalent to a member
  of the family `y`. -/
@[reducible, simp]def mem : bSet ùîπ ‚Üí bSet ùîπ ‚Üí ùîπ
| a (mk Œ±' A' B') := ‚®Üa', B' a' ‚äì a =·¥Æ A' a'

@[reducible]def empty'' : bSet ùîπ :=
  mk (ulift bool) (Œª x, ‚àÖ) (Œª x, by {repeat{cases x}, exact ‚ä•, exact ‚ä§})

infix ` ‚àà·¥Æ `:80 := mem

lemma mem_unfold {u v : bSet ùîπ} : u ‚àà·¥Æ v = ‚®Ü(i : v.type), v.bval i ‚äì u =·¥Æ v.func i :=
by cases v; simp


/-- ‚àÖ appears in empty'' with probability 0 and 1, with the higher probability winning the
    vote of membership. This demonstrates why the inequality in the following theorem is
    necessary. -/
example : ‚àÖ ‚àà·¥Æ empty'' = (‚ä§ : ùîπ) :=
  by {apply top_unique, apply le_supr_of_le ‚ä§, swap, exact ‚ü®‚ü®(tt)‚ü©‚ü©, finish}

theorem mem.mk {Œ± : Type*} (A : Œ± ‚Üí bSet ùîπ) (B : Œ± ‚Üí ùîπ) (a : Œ±) : B a ‚â§ A a ‚àà·¥Æ mk Œ± A B :=
  le_supr_of_le a $ by simp

theorem mem.mk' (x : bSet ùîπ) (a : x.type) : x.bval a ‚â§ x.func a ‚àà·¥Æ x :=
by {cases x, apply le_supr_of_le a, simp}

@[simp, reducible]protected def subset : bSet ùîπ ‚Üí bSet ùîπ ‚Üí ùîπ
| (mk Œ± A B) b := ‚®Öa:Œ±, B a ‚üπ (A a ‚àà·¥Æ b)

infix ` ‚äÜ·¥Æ `:80 := bSet.subset

@[simp]lemma subset_unfold {x u : bSet ùîπ} : x ‚äÜ·¥Æ u = (‚®Ö(j : x.type), x.bval j ‚üπ x.func j ‚àà·¥Æ u) :=
by induction x; dsimp; congr

@[simp]protected def insert : bSet ùîπ ‚Üí ùîπ ‚Üí bSet ùîπ ‚Üí bSet ùîπ
| u b ‚ü®Œ±, A, B‚ü© := ‚ü®option Œ±, Œªo, option.rec u A o, Œªo, option.rec b B o‚ü©

protected def insert' : bSet ùîπ ‚Üí ùîπ ‚Üí bSet ùîπ ‚Üí bSet ùîπ
| u b ‚ü®Œ±, A, B‚ü© := ‚ü®unit ‚äï Œ±, Œª o, sum.rec (Œª_, u) A o, Œª o, sum.rec (Œª_, b) B o‚ü©

@[reducible, simp]protected def insert1 : bSet ùîπ ‚Üí bSet ùîπ ‚Üí bSet ùîπ
| u v := bSet.insert u ‚ä§ v

instance insert_bSet : has_insert (bSet ùîπ) (bSet ùîπ) :=
  ‚ü®Œª u v, bSet.insert1 u v‚ü©

@[simp]lemma insert_rw {y z : bSet ùîπ} : insert y z = bSet.insert y ‚ä§ z :=
  by refl

@[simp]theorem mem_insert {x y z : bSet ùîπ} {b : ùîπ} :
  x ‚àà·¥Æ bSet.insert y b z = (b ‚äì x =·¥Æ y) ‚äî x ‚àà·¥Æ z :=
  by induction y; induction z; simp

theorem mem_insert1 {x y z : bSet ùîπ} : x ‚àà·¥Æ insert y z = x =·¥Æ y ‚äî x ‚àà·¥Æ z :=
  by simp

example : {‚àÖ} =·¥Æ empty'' = (‚ä§ : ùîπ) :=
begin
  simp[empty'', singleton, insert, has_insert.insert], simp[has_emptyc.emptyc, empty],
  refine ‚ü®_, by intro i; repeat{cases i}‚ü©, apply top_unique,
 have : ‚ä§ = (ulift.rec (bool.rec ‚ä• ‚ä§) : ulift bool ‚Üí ùîπ) (ulift.up tt),
   by refl,
 rw[this], apply le_supr
end

@[symm]theorem bv_eq_symm {x y : bSet ùîπ} : x =·¥Æ y = y =·¥Æ x :=
begin
  induction x with Œ± A B generalizing y, induction y with Œ±' A' B',
  suffices : ‚àÄ a : Œ±, ‚àÄ a' : Œ±', A' a' =·¥Æ A a = A a =·¥Æ A' a',
    by {simp[bv_eq, this, inf_comm]}, from Œª _ _, by simp[x_ih ‚ÄπŒ±‚Ä∫]
end

-- example {x y : bSet ùîπ} : x =·¥Æ y = y =·¥Æ x :=
-- begin
--   fapply le_antisymm; fapply bv_prf,
--   exact [x=·¥Æy], simp, tactic.rotate 1, exact [y=·¥Æx], simp,
--   induction x with Œ± A B generalizing y, induction y with Œ±' A' B',
--   rw[bv_eq], apply bv_cases_head,
--   apply bv_prf_and_intro, sorry
-- end

theorem bv_eq_unfold (x y : bSet ùîπ) :
  x =·¥Æ y = (‚®Ö(a : x.type), x.bval a ‚üπ (x.func a ‚àà·¥Æ y))
          ‚äì (‚®Ö(a' : y.type), (y.bval a' ‚üπ (y.func a' ‚àà·¥Æ x))) :=
 by induction x; induction y; simp[mem,bv_eq,bv_eq_symm]

theorem bSet_axiom_of_extensionality (x y : bSet ùîπ) :
(‚®Ö(z : bSet ùîπ), (z ‚àà·¥Æ x ‚üπ z ‚àà·¥Æ y) ‚äì (z ‚àà·¥Æ y ‚üπ z ‚àà·¥Æ x)) ‚â§ x =·¥Æ y :=
begin
  rw[bv_eq_unfold],
  apply le_inf; apply le_infi; intro i,
  {fapply infi_le_of_le (x.func i), apply inf_le_left_of_le,
   induction x, unfold mem, simp, by apply imp_le_of_left_le; apply le_supr_of_le i;
   exact le_inf (by refl) (by rw[bv_eq_refl]; apply le_top)},
  {fapply infi_le_of_le (y.func i), apply inf_le_right_of_le,
   induction y, unfold mem, simp, by apply imp_le_of_left_le; apply le_supr_of_le i;
   exact le_inf (by refl) (by rw[bv_eq_refl]; apply le_top)},
end

theorem bv_eq_trans {x y z : bSet ùîπ} : (x =·¥Æ y ‚äì y =·¥Æ z) ‚â§ x =·¥Æ z :=
begin
    induction x with Œ± A B generalizing y z,
    cases y with Œ±' A' B',
    induction z with Œ±'' A'' B'',
    have H1 : ‚àÄ a : Œ±, ‚àÄ a' : Œ±', ‚àÄ a'' : Œ±'',
           (((A a =·¥Æ A' a') ‚äì (A' a' =·¥Æ A'' a'')) ‚äì B'' a'') ‚â§ (A a =·¥Æ A'' a'' ‚äì B'' a''),
      by {intros a a' a'', refine inf_le_inf _ (by refl), exact @x_ih a (A' a') (A'' a'')},
    have H2 : ‚àÄ i'' : Œ±'', ‚àÄ a' : Œ±', ‚àÄ a : Œ±,
           A'' i'' =·¥Æ A' a' ‚äì A' a' =·¥Æ A a ‚äì B a ‚â§ A'' i'' =·¥Æ A a ‚äì B a,
      by {intros a'' a' a, refine inf_le_inf _ (by refl),
        convert @x_ih a (A' a') (A'' a'') using 1; simp[bv_eq_symm], ac_refl},
    apply le_inf,
      {bv_intro i, apply deduction.mp,
        change _ ‚â§ (A i) ‚àà·¥Æ ‚ü®Œ±'', A'', B''‚ü©,
       have this1 : ‚ü®Œ±, A, B‚ü© =·¥Æ ‚ü®Œ±', A', B'‚ü© ‚äì B i ‚â§ A i ‚àà·¥Æ ‚ü®Œ±', A', B'‚ü©,
       by  {rw[deduction], from inf_le_left_of_le (infi_le _ _)},
       suffices : A i ‚àà·¥Æ ‚ü®Œ±', A', B'‚ü© ‚äì ‚ü®Œ±', A', B'‚ü© =·¥Æ ‚ü®Œ±'', A'', B''‚ü© ‚â§ A i ‚àà·¥Æ ‚ü®Œ±'', A'', B''‚ü©,
         by {have := le_trans (inf_le_inf this1 (by refl)) this,
              convert this using 1, ac_refl },
       suffices : ‚àÄ a', ‚ü®Œ±', A', B'‚ü© =·¥Æ ‚ü®Œ±'', A'', B''‚ü© ‚äì A i =·¥Æ A' a' ‚äì B' a' ‚â§ A i ‚àà·¥Æ ‚ü®Œ±'', A'', B''‚ü©,
         by {convert (supr_le this) using 1, simp[mem, inf_comm, inf_supr_eq],
            congr, ext, ac_refl},
       have this2 : ‚àÄ a', ‚ü®Œ±', A', B'‚ü© =·¥Æ ‚ü®Œ±'', A'', B''‚ü© ‚äì B' a' ‚â§ A' a' ‚àà·¥Æ ‚ü®Œ±'', A'', B''‚ü©,
         by {intro a', rw[deduction], apply inf_le_left_of_le, apply infi_le},
       suffices : ‚àÄ a', A i =·¥Æ A' a' ‚äì A' a' ‚àà·¥Æ ‚ü®Œ±'', A'', B''‚ü© ‚â§ A i ‚àà·¥Æ ‚ü®Œ±'', A'', B''‚ü©,
         by {intro a', have := le_trans (inf_le_inf (by refl) (this2 a')) (this a'),
         convert this using 1, ac_refl},
       intro a', rw[inf_supr_eq], apply supr_le, intro a'',
       conv {to_lhs, congr, skip, rw[inf_comm]},
       suffices : A i =·¥Æ A' a' ‚äì (A' a' =·¥Æ A'' a'' ‚äì B'' a'')
         = A i =·¥Æ A' a' ‚äì A' a' =·¥Æ A'' a'' ‚äì B'' a'',
         by {rw[this], clear this, apply le_trans, exact (H1 i a' a''),
         apply le_supr_of_le a'', rw[inf_comm]},
       ac_refl}, 
      {bv_intro i'', apply deduction.mp,
        conv {to_rhs, congr, funext, rw[bv_eq_symm]}, change _ ‚â§ (A'' i'') ‚àà·¥Æ ‚ü®Œ±, A, B‚ü©,
        have this1 : ‚ü®Œ±'', A'', B''‚ü© =·¥Æ ‚ü®Œ±', A', B'‚ü© ‚äì B'' i'' ‚â§ A'' i'' ‚àà·¥Æ ‚ü®Œ±', A', B'‚ü©,
          by {rw[deduction], apply inf_le_left_of_le, apply infi_le},
        suffices : A'' i'' ‚àà·¥Æ ‚ü®Œ±', A', B'‚ü© ‚äì ‚ü®Œ±', A', B'‚ü© =·¥Æ ‚ü®Œ±, A, B‚ü© ‚â§ A'' i'' ‚àà·¥Æ ‚ü®Œ±, A, B‚ü©,
         by {have := le_trans (inf_le_inf this1 (by refl)) this,
              convert this using 1, simp[bv_eq_symm], ac_refl},
        suffices : ‚àÄ a', ‚ü®Œ±', A', B'‚ü© =·¥Æ ‚ü®Œ±, A, B‚ü© ‚äì A'' i'' =·¥Æ A' a' ‚äì B' a' ‚â§ A'' i'' ‚àà·¥Æ ‚ü®Œ±, A, B‚ü©,
          by {convert (supr_le this) using 1, simp[mem, inf_comm, inf_supr_eq],
            congr, ext, ac_refl},
        have this2 : ‚àÄ a', ‚ü®Œ±', A', B'‚ü© =·¥Æ ‚ü®Œ±, A, B‚ü© ‚äì B' a' ‚â§ A' a' ‚àà·¥Æ ‚ü®Œ±, A, B‚ü©,
          by {intro a', rw[deduction], apply inf_le_left_of_le, apply infi_le},
        suffices : ‚àÄ a', A'' i'' =·¥Æ A' a' ‚äì A' a' ‚àà·¥Æ ‚ü®Œ±, A, B‚ü© ‚â§ A'' i'' ‚àà·¥Æ ‚ü®Œ±, A, B‚ü©,
          by {intro a', have := le_trans (inf_le_inf (by refl) (this2 a')) (this a'),
         convert this using 1, ac_refl},
        intro a', rw[inf_supr_eq], apply supr_le, intro a,
        conv {to_lhs, congr, skip, rw[inf_comm]},
        suffices : A'' i'' =·¥Æ A' a' ‚äì (A' a' =·¥Æ A a ‚äì B a)
          = A'' i'' =·¥Æ A' a' ‚äì A' a' =·¥Æ A a ‚äì B a,
          by {rw[this], clear this, apply le_trans, exact (H2 i'' a' a),
          apply le_supr_of_le a, rw[inf_comm]},
        ac_refl}
end

lemma bv_context_trans {Œì : ùîπ} {a‚ÇÅ a‚ÇÇ a‚ÇÉ : bSet ùîπ} (H‚ÇÅ : Œì ‚â§ a‚ÇÅ =·¥Æ a‚ÇÇ) (H‚ÇÇ : Œì ‚â§ a‚ÇÇ =·¥Æ a‚ÇÉ) :
  Œì ‚â§ a‚ÇÅ =·¥Æ a‚ÇÉ :=
by {have := inf_le_inf H‚ÇÅ H‚ÇÇ, rw[inf_self] at this, apply le_trans this, apply bv_eq_trans}

lemma bv_rw {x y : bSet ùîπ} (H : x =·¥Æ y = ‚ä§) (œï : bSet ùîπ ‚Üí ùîπ) {h_congr : ‚àÄ x y, x =·¥Æ y ‚äì œï x ‚â§ œï y} : œï y = œï x :=
begin
  apply le_antisymm, swap, rw[show œï x = œï x ‚äì ‚ä§, by simp], rw[<-H, inf_comm], apply h_congr,
  rw[show œï y = œï y ‚äì ‚ä§, by simp], rw[<-H, inf_comm, bv_eq_symm], apply h_congr
end

lemma bv_eq_le_congr_right {u v w} {h : v = w} : u =·¥Æ v ‚â§ (u =·¥Æ w : ùîπ) := by rw[h]

lemma bv_eq_le_congr_left {u v w} {h : v = w} : v =·¥Æ u ‚â§ (w =·¥Æ u : ùîπ) := by rw[h]

/-- If u = v and u ‚àà w, then this implies that v ‚àà w -/
lemma subst_congr_mem_left {u v w : bSet ùîπ} : u =·¥Æ v ‚äì u ‚àà·¥Æ w ‚â§ v ‚àà·¥Æ w :=
begin
  cases w,
  have : ‚àÄ a : w_Œ±, u =·¥Æ v ‚äì w_B a ‚äì u =·¥Æ w_A a ‚â§ w_B a ‚äì v =·¥Æ w_A a,
    by {intro a, have := inf_le_inf (by refl : w_B a ‚â§ w_B a) (@bv_eq_trans _ _ v u (w_A a)),
      convert this using 1, simp[bv_eq_symm, inf_comm, inf_assoc]},
  convert supr_le_supr this, simp[inf_supr_eq], congr, ext, ac_refl
end

/-- If v = w and u ‚àà v, then this implies that u ‚àà w -/
lemma subst_congr_mem_right {u v w : bSet ùîπ} : (v =·¥Æ w ‚äì u ‚àà·¥Æ v) ‚â§ u ‚àà·¥Æ w :=
begin
  induction v, rw[inf_supr_eq], apply supr_le, intro i,
  suffices : mk v_Œ± ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫ =·¥Æ w ‚äì v_B i ‚â§ v_A i ‚àà·¥Æ w,
  have := le_trans (inf_le_inf this (by refl : u =·¥Æ v_A i ‚â§ u =·¥Æ v_A i)) _,
  rw[<-inf_assoc], convert this using 1,
  rw[bv_eq_symm, inf_comm], apply subst_congr_mem_left,
  rw[deduction], cases w, apply inf_le_left_of_le, apply infi_le
end

lemma bounded_quantification {v : bSet ùîπ} {œï : bSet ùîπ ‚Üí ùîπ } {h_congr : ‚àÄ x y, x =·¥Æ y ‚äì œï x ‚â§ œï y} :
  (‚®Ö(i_x : v.type), (v.bval i_x ‚üπ œï (v.func i_x))) = (‚®Ö(x : bSet ùîπ), x ‚àà·¥Æ v ‚üπ œï x)  :=
begin
  apply le_antisymm,
    {bv_intro x, cases v, simp, rw[supr_imp_eq],
     bv_intro i_y, apply infi_le_of_le i_y,
     rw[<-deduction,<-inf_assoc], apply le_trans, apply inf_le_inf,
     apply bv_imp_elim, refl, rw[inf_comm, bv_eq_symm], apply h_congr},
         {bv_intro i_x', apply infi_le_of_le (func v i_x'), apply imp_le_of_left_le,
     cases v, simp, apply le_supr_of_le i_x',
       apply le_inf, refl, rw[bv_eq_refl], apply le_top}
end

lemma subset_unfold' {x u : bSet ùîπ} : x ‚äÜ·¥Æ u = ‚®Ö(w : bSet ùîπ), w ‚àà·¥Æ x ‚üπ w ‚àà·¥Æ u :=
begin
  simp only [subset_unfold], have := @bounded_quantification ùîπ _ x (Œª y, y‚àà·¥Æ u),
  dsimp at this, rw[this], intros, apply subst_congr_mem_left
end

-- lemma bounded_quantification' {œï : bSet ùîπ ‚Üí ùîπ } {h_congr : ‚àÄ x y, x =·¥Æ y ‚äì œï x ‚â§ œï y} {v : bSet ùîπ} :
--   (‚®Ö(i_x : v.type), (v.bval i_x ‚üπ œï (v.func i_x))) = (‚®Ö(x : bSet ùîπ), x ‚àà·¥Æ v ‚üπ œï x)  :=
-- begin
--   apply le_antisymm,
--     {bv_intro x, cases v, simp, rw[supr_imp_eq],
--      bv_intro i_y, apply infi_le_of_le i_y,
--      rw[<-deduction,<-inf_assoc], apply le_trans, apply inf_le_inf,
--      apply bv_imp_elim, refl, rw[inf_comm, bv_eq_symm], apply h_congr},
--          {bv_intro i_x', apply infi_le_of_le (func v i_x'), apply imp_le_of_left_le,
--      cases v, simp, apply le_supr_of_le i_x',
--        apply le_inf, refl, rw[bv_eq_refl], apply le_top}
-- end


lemma subst_congr_subset_left {x v u} : ((v ‚äÜ·¥Æ u) ‚äì (x =·¥Æ v) : ùîπ) ‚â§ (x ‚äÜ·¥Æ u) :=
begin
  simp only [subset_unfold],
  have H‚ÇÅ := @bounded_quantification _ _ v (Œª x, x ‚àà·¥Æ u)
    (by {intros, apply subst_congr_mem_left}),
  have H‚ÇÇ := @bounded_quantification _ _ x (Œª x, x ‚àà·¥Æ u)
    (by {intros, apply subst_congr_mem_left}),
  rw[H‚ÇÅ, H‚ÇÇ], dsimp, bv_intro z, rw[deduction],
  apply infi_le_of_le z, rw[<-deduction, <-deduction], rw[inf_assoc],
  apply le_trans, apply inf_le_inf, refl, apply subst_congr_mem_right,
  apply bv_imp_elim -- todo write tactics to make these calculations easier
end

def is_definite (u : bSet ùîπ) : Prop := ‚àÄ i : u.type, u.bval i = ‚ä§

lemma eq_empty {u : bSet ùîπ} : u =·¥Æ ‚àÖ = -‚®Üi, u.bval i :=
begin
  simp only [bv_eq_unfold], simp only [mem_unfold],
  simp only [inf_top_eq, bSet.forall_over_empty, bSet.exists_over_empty,imp_bot, neg_supr]
end


/-- œï (x) is true if and only if the Boolean truth-value of œï(xÃå) is ‚ä§-/
/- To even state this theorem, we need to set up more general machinery for
   Boolean-valued structures and the interpretation of formulas within them -/
-- theorem check_transfer : sorry := sorry

def mixture {Œπ : Type u} (a : Œπ ‚Üí ùîπ) (u : Œπ ‚Üí bSet ùîπ) : bSet ùîπ :=
  ‚ü®Œ£(i : Œπ), (u i).type,
    Œªx, (u x.fst).func x.snd,
      Œªx, ‚®Ü(j:Œπ), a j ‚äì ((u x.fst).func x.snd) ‚àà·¥Æ u j‚ü©

/-- Given a‚ÇÅ a‚ÇÇ : ùîπ, return the canonical map from ulift bool to ùîπ given by ff ‚Ü¶ a‚ÇÅ and tt ‚Ü¶ a‚ÇÇ-/
@[reducible]def bool.map {Œ± : Type*} (a‚ÇÅ a‚ÇÇ : Œ±) : (ulift bool) ‚Üí Œ± :=
  Œª x, bool.rec_on (x.down) a‚ÇÅ a‚ÇÇ 

def two_term_mixture (a‚ÇÅ a‚ÇÇ : ùîπ) (h_anti : a‚ÇÅ ‚äì a‚ÇÇ = ‚ä•) (u‚ÇÅ u‚ÇÇ : bSet ùîπ) : bSet ùîπ :=
@mixture ùîπ _ (ulift bool) (bool.map a‚ÇÅ a‚ÇÇ) (bool.map u‚ÇÅ u‚ÇÇ)

-- @[simp]lemma two_term_mixture_type (a‚ÇÅ a‚ÇÇ : ùîπ) (h_anti : a‚ÇÅ ‚äì a‚ÇÇ = ‚ä•) (u‚ÇÅ u‚ÇÇ : bSet ùîπ) :
--   (two_term_mixture a‚ÇÅ a‚ÇÇ h_anti u‚ÇÅ u‚ÇÇ).type = (Œ£(i : ulift bool), ((bool.map u‚ÇÅ u‚ÇÇ) i).type) := sorry 

lemma two_term_mixture_h_star (a‚ÇÅ a‚ÇÇ : ùîπ) (h_anti : a‚ÇÅ ‚äì a‚ÇÇ = ‚ä•) (u‚ÇÅ u‚ÇÇ : bSet ùîπ) :
  ‚àÄ i j : (ulift bool), (bool.map a‚ÇÅ a‚ÇÇ) i ‚äì (bool.map a‚ÇÅ a‚ÇÇ) j ‚â§ (bool.map u‚ÇÅ u‚ÇÇ) i =·¥Æ (bool.map u‚ÇÅ u‚ÇÇ) j :=
begin
  intros i j, cases i, cases j, cases i; cases j; try{simp*},
  change a‚ÇÇ ‚äì a‚ÇÅ ‚â§ _, rw[inf_comm, h_anti], apply bot_le
end

@[simp]lemma bval_mixture {Œπ : Type u} {a : Œπ ‚Üí ùîπ} {u : Œπ ‚Üí bSet ùîπ} :
  (mixture a u).bval = Œªx, ‚®Ü(j:Œπ), a j ‚äì ((u x.fst).func x.snd) ‚àà·¥Æ u j :=
  by refl

@[simp]lemma two_term_mixture_bval (a‚ÇÅ a‚ÇÇ : ùîπ) (h_anti : a‚ÇÅ ‚äì a‚ÇÇ = ‚ä•) (u‚ÇÅ u‚ÇÇ : bSet ùîπ) : ‚àÄ i,
  (two_term_mixture a‚ÇÅ a‚ÇÇ h_anti u‚ÇÅ u‚ÇÇ).bval i = (a‚ÇÅ ‚äì ((two_term_mixture a‚ÇÅ a‚ÇÇ h_anti u‚ÇÅ u‚ÇÇ).func i ‚àà·¥Æ u‚ÇÅ)) ‚äî (a‚ÇÇ ‚äì ((two_term_mixture a‚ÇÅ a‚ÇÇ h_anti u‚ÇÅ u‚ÇÇ).func i ‚àà·¥Æ u‚ÇÇ)) := Œª i,
begin
  dsimp[two_term_mixture], tidy, apply le_antisymm, apply supr_le, intro j, repeat{cases j},
  apply le_sup_left_of_le, refl, apply le_sup_right_of_le, refl,
  apply bv_or_elim; [apply bv_use (ulift.up ff), apply bv_use (ulift.up tt)]; refl
end

def floris_mixture {Œπ : Type u} (a : Œπ ‚Üí ùîπ) (u : Œπ ‚Üí bSet ùîπ) : bSet ùîπ :=
  ‚ü®Œ£(i : Œπ), (u i).type, Œªx, (u x.fst).func x.snd, Œªx, a x.fst ‚äì (u x.fst).bval x.snd‚ü©

/-- Mixing lemma, c.f. Bell's book or Lemma 1 of Hamkins-Seabold -/
lemma mixing_lemma' {Œπ : Type u} (a : Œπ ‚Üí ùîπ) (œÑ : Œπ ‚Üí bSet ùîπ) (h_star : ‚àÄ i j : Œπ, a i ‚äì a j ‚â§ œÑ i =·¥Æ œÑ j) : ‚àÄ i : Œπ, a i ‚â§ (mixture a œÑ) =·¥Æ œÑ i := Œª i,
begin
rw[bv_eq_unfold],
  apply le_inf,
    {bv_intro i_z, apply bv_imp_intro,
    simp only [bSet.bval, bSet.mem, bSet.func, bSet.type, bSet.bval_mixture],
    rw[inf_supr_eq], apply bv_Or_elim,
    intro j, rw[<-inf_assoc],
    have : a i ‚äì a j ‚äì func (œÑ (i_z.fst)) (i_z.snd) ‚àà·¥Æ œÑ j ‚â§ (œÑ i =·¥Æ œÑ j) ‚äì func (œÑ (i_z.fst)) (i_z.snd) ‚àà·¥Æ œÑ j,
      by {apply inf_le_inf (h_star i j), refl},
    apply le_trans this, rw[bv_eq_symm], apply subst_congr_mem_right},
  {bv_intro i_z, rw[<-deduction], apply le_supr_of_le (sigma.mk i i_z),
  simp, apply le_supr_of_le i, apply inf_le_inf (by refl : a i ‚â§ a i), dsimp, cases (œÑ i),
  apply le_supr_of_le i_z, from le_inf (by refl) (by simp)}
end

lemma mixing_lemma {Œπ : Type u} (a : Œπ ‚Üí ùîπ) (œÑ : Œπ ‚Üí bSet ùîπ) (h_star : ‚àÄ i j : Œπ, a i ‚äì a j ‚â§ œÑ i =·¥Æ œÑ j) : ‚àÉ x, ‚àÄ i : Œπ, a i ‚â§ x =·¥Æ œÑ i :=
 by refine ‚ü®mixture a œÑ, Œª i, _‚ü©; apply mixing_lemma'; assumption

lemma mixing_lemma_two_term (a‚ÇÅ a‚ÇÇ : ùîπ) (h_anti : a‚ÇÅ ‚äì a‚ÇÇ = ‚ä•) (u‚ÇÅ u‚ÇÇ : bSet ùîπ) :
  a‚ÇÅ ‚â§ (two_term_mixture a‚ÇÅ a‚ÇÇ h_anti u‚ÇÅ u‚ÇÇ =·¥Æ u‚ÇÅ) ‚àß a‚ÇÇ ‚â§ (two_term_mixture a‚ÇÅ a‚ÇÇ h_anti u‚ÇÅ u‚ÇÇ =·¥Æ u‚ÇÇ) :=
begin
  have := mixing_lemma' (bool.map a‚ÇÅ a‚ÇÇ) (bool.map u‚ÇÅ u‚ÇÇ)
    (by {apply two_term_mixture_h_star, exact h_anti}),
  split; [specialize this (ulift.up ff), specialize this (ulift.up tt)]; exact this
end

-- TODO(jesse) try proving mixing_lemma with floris_mixture and see if anything goes wrong

/-- In particular, the mixing lemma applies when the weights (a_i) form an antichain and the indexing is injective -/
lemma h_star_of_antichain_injective {Œπ : Type u} {a : Œπ ‚Üí ùîπ} {œÑ : Œπ ‚Üí bSet ùîπ} {h_anti : antichain (a '' set.univ)} {h_inj : function.injective a} :
  ‚àÄ i j : Œπ, a i ‚äì a j ‚â§ œÑ i =·¥Æ œÑ j :=
begin
  intros i j, by_cases a i = a j, simp[h_inj h],
  have := h_anti _ _ _ _ h, simp[this], tidy
end

/- Note: this is the special condition assumed of indexed antichains by Bell-/
lemma h_star_of_antichain_index {Œπ : Type u} {a : Œπ ‚Üí ùîπ} {œÑ : Œπ ‚Üí bSet ùîπ} {h_anti : antichain (a '' set.univ)} {h_index : ‚àÄ i j : Œπ, i ‚â† j ‚Üí a i ‚äì a j = ‚ä•} :
  ‚àÄ i j : Œπ, a i ‚äì a j ‚â§ œÑ i =·¥Æ œÑ j :=
  Œª i j, by {haveI : decidable_eq Œπ := Œª _ _,
  by apply classical.prop_decidable _,
    by_cases i = j, simp[h], finish[h_index i j]}

/- The next two lemmas use the fact that ùîπ : Type u to extract a small set witnessing quantification over all of bSet ùîπ -/

/- i.e., in bSet ùîπ, any existential quantification is equivalent to a bounded existential quantification. this is one place where it's crucial that ùîπ lives in the type universe out of which bSet ùîπ is being built -/
section smallness
variable {œï : bSet ùîπ ‚Üí ùîπ}

@[reducible, simp]noncomputable def fiber_lift (b : œï '' set.univ) :=
classical.indefinite_description (Œª a : bSet ùîπ, œï a = b.val) $
  by {cases b.property, use w, exact h.right}

noncomputable def B_small_witness : bSet ùîπ :=
‚ü®œï '' set.univ, Œª b, (fiber_lift b).val, Œª _, ‚ä§‚ü©

@[simp]lemma B_small_witness_spec : ‚àÄ b, œï ((@B_small_witness _ _ œï).func b) = b.val :=
  Œª b, (fiber_lift b).property

lemma B_small_witness_supr : (‚®Ü(x : bSet ùîπ), œï x) = ‚®Ü(b : (@B_small_witness _ _ œï).type), œï (B_small_witness.func b) :=
begin
 apply le_antisymm,
 apply supr_le, intro x, let b : type B_small_witness := by {use œï x, simp, exact ‚ü®x, rfl‚ü©},
 fapply le_supr_of_le, exact b, have := B_small_witness_spec b, dsimp at this, rw[this],
 apply supr_le, intro b, apply le_supr_of_le, swap, exact (fiber_lift b).val, refl
end

@[reducible, simp]def not_b (b : ùîπ) : set ùîπ := Œª y, y ‚â† b

section well_ordering
variables {Œ± : Type*} (r : Œ± ‚Üí Œ± ‚Üí Prop) [is_well_order Œ± r]
local infix `‚â∫`:50 := r

def down_set (a : Œ±) : set Œ± := {a' | a' ‚â∫ a}

def down_set' (a : Œ±) : set Œ± := insert a $ down_set r a

lemma down_set_trans {a b} {h : a ‚â∫ b} : down_set r a ‚äÜ down_set r b :=
begin
  intros x H, have := is_well_order.is_trans r, cases this, apply this,
  exact H, exact h
end

end well_ordering

variable (r : type (@B_small_witness _ _ œï) ‚Üí type (@B_small_witness _ _ œï) ‚Üí Prop)
variable [is_well_order _ r]
local infix `‚â∫`:50 := r

lemma down_set_mono_supr {a b} {h : a ‚â∫ b} {s : type (@B_small_witness _ _ œï) ‚Üí ùîπ} :
 (‚®Ü(i ‚àà down_set r a), s i) ‚â§ (‚®Ü(i ‚àà down_set r b), s i) :=
begin
  apply supr_le_supr, intro i, apply supr_le, intro H, apply le_supr_of_le,
  apply down_set_trans, exact h, exact H, refl
end

lemma down_set'_mono_supr {a b} {h : a ‚â∫ b} {s : type (@B_small_witness _ _ œï) ‚Üí ùîπ} :
 (‚®Ü(i ‚àà down_set' r a), s i) ‚â§ (‚®Ü(i ‚àà down_set' r b), s i) :=
begin
  apply supr_le_supr, intro i, apply supr_le, intro H,
 apply le_supr_of_le,
  cases H, apply or.inr, rw[H], exact h, apply or.inr,
  apply down_set_trans, exact h, exact H, refl
end

def witness_antichain : _ ‚Üí ùîπ :=
(Œª b : type (@B_small_witness _ _ œï), b.val - (‚®Ü(b' : (down_set r b)), b'.val.val))

def trichotomy := (is_well_order.is_trichotomous r).trichotomous

lemma dichotomy_of_neq (x y) : x ‚â† y ‚Üí x ‚â∫ y ‚à® y ‚â∫ x :=
Œª H, by {[smt] eblast_using [trichotomy r x y]}

lemma not_ge_of_in_down_set (a b) : a ‚àà down_set r b ‚Üí ¬¨ b ‚â∫ a :=
begin
  intros H H', have H'' : a ‚â∫ b, by {simpa[down_set]},
  cases (show (is_asymm _ r), by apply_instance),
  specialize asymm a b H'', contradiction
end

--TODO(jesse) clean this up later, maybe write ac_transpose?
-- run_cmd mk_simp_attr `reassoc
-- @[reassoc]lemma sup_reassoc {a b c : ùîπ} : a ‚äî (b ‚äî c) = a ‚äî b ‚äî c :=
-- by ac_refl

-- @[reassoc]lemma inf_reassoc {a b c : ùîπ} : a ‚äì (b ‚äì c) = a ‚äì b ‚äì c :=
-- by ac_refl

-- @[reassoc]lemma abcd_reassoc_sup {a b c d : ùîπ} : (a ‚äî b) ‚äî (c ‚äî d) = a ‚äî b ‚äî c ‚äî d :=
-- by rw[sup_reassoc]

-- @[reassoc]lemma abcd_reassoc_inf {a b c d : ùîπ} : (a ‚äì b) ‚äì (c ‚äì d) = a ‚äì b ‚äì c ‚äì d :=
-- by rw[inf_reassoc]

-- lemma abcd_rw_cabd_sup {a b c d : ùîπ} : a ‚äî b ‚äî c ‚äî d = c ‚äî b ‚äî a ‚äî d :=
-- by ac_refl

-- lemma abcd_rw_cabd_inf {a b c d : ùîπ} : a ‚äì b ‚äì c ‚äì d = c ‚äì b ‚äì a ‚äì d :=
-- by ac_refl

-- lemma abcd_rw_bcad_inf {a b c d : ùîπ} : a ‚äì b ‚äì c ‚äì d = b ‚äì c ‚äì a ‚äì d :=
-- by ac_refl

def witness_antichain_index : ‚àÄ {i j}, i ‚â† j ‚Üí (@witness_antichain _ _ œï r _) i ‚äì (@witness_antichain _ _ œï r _) j = ‚ä• :=
Œª x y h_neq,
begin
  dsimp[witness_antichain], simp[sub_eq, neg_supr], 
  apply bot_unique, cases dichotomy_of_neq r _ _ h_neq,
  {ac_change (y.val ‚äì ‚®Ö (i : {x_1 // x_1 ‚àà down_set r x}), -(i.val).val) ‚äì
    (x.val ‚äì ‚®Ö (i : {x // x ‚àà down_set r y}), -(i.val).val) ‚â§ ‚ä•,
    apply inf_le_right_of_le,
  rw[inf_comm, deduction], apply infi_le_of_le,
  swap, use x, exact h, simp},
  
  {ac_change (‚®Ö (i : {x_1 // x_1 ‚àà down_set r x}), -(i.val).val) ‚äì y.val ‚äì
      (x.val ‚äì ‚®Ö (i : {x // x ‚àà down_set r y}), -(i.val).val) ‚â§ ‚ä•,
      apply inf_le_left_of_le, rw[deduction], apply infi_le_of_le, swap, exact ‚ü®y, h‚ü©, simp}
end

lemma witness_antichain_antichain : antichain ((@witness_antichain _ _ œï r _) '' set.univ) :=
begin
  intros x h_x y h_y h_neq, simp at h_x h_y, rcases h_y with ‚ü®w_y, h_y‚ü©,
  rcases h_x with ‚ü®w_x, h_x‚ü©, rw[<-h_y, <-h_x],
  apply witness_antichain_index, by_contra, cc
end

lemma witness_antichain_property : ‚àÄ b, (@witness_antichain _ _ œï r _) b ‚â§ b.val :=
  Œª b, by simp[witness_antichain, sub_eq]

lemma supr_antichain2_contains : (‚®Ü (b' : type (@B_small_witness _ _ œï)), œï (func (@B_small_witness _ _ œï) b')) ‚â§
    ‚®Ü (b : type (@B_small_witness _ _ œï)), witness_antichain r b :=
begin
  apply supr_le, intro i, apply le_supr_of_le'', fsplit,
  exact down_set' r i, rw[B_small_witness_spec i],
  have := (is_well_order.wf r).apply i, induction this,
  intros,
 rw[down_set',supr_insert], unfold witness_antichain,
  rw[sub_eq], rw[sup_inf_right], apply le_inf, apply le_sup_left,
  -- simp[neg_supr, sub_eq],
  apply le_trans (@le_top _ _ this_x.val),
     let A := _, change ‚ä§ ‚â§ (A ‚äî _ : ùîπ), apply le_trans (by simp : ‚ä§ ‚â§ A ‚äî -A), apply sup_le_sup, refl, dsimp[A],
   rw[lattice.neg_neg], 
   apply supr_le, intro j,
   apply le_trans (this_ih j j.property), unfold witness_antichain,
   apply supr_le_supr, intro i', apply supr_le, intro H',
   cases H', subst H', apply le_supr_of_le, exact j.property, refl,
   apply le_supr_of_le, apply down_set_trans, exact j.property, exact H',
   refl
end
end smallness


lemma maximum_principle (œï : bSet ùîπ ‚Üí ùîπ) (h_congr : ‚àÄ x y, x =·¥Æ y ‚äì œï x ‚â§ œï y) : ‚àÉ u, (‚®Ü(x:bSet ùîπ), œï x) = œï u :=
begin
  have := classical.indefinite_description _ (@well_ordering_thm (type (@B_small_witness _ _ œï))),
  cases this with r inst_r,
  haveI : is_well_order _ r := by assumption,
  let w := @B_small_witness _ _ œï,
    have from_mixing_lemma := mixing_lemma ((witness_antichain r)) (w.func)
      (Œª i j, by {by_cases i = j, finish, simp[witness_antichain_index r h]}),
    rcases from_mixing_lemma with ‚ü®u, H_w‚ü©,
    use u, fapply le_antisymm,
    {rw[B_small_witness_supr],
     have H1 : (‚®Ü(b : type B_small_witness), (witness_antichain r) b) ‚â§ œï u,
     apply supr_le, intro Œæ,
    have this'' : ‚àÄ b, (witness_antichain r) b ‚â§ u =·¥Æ func w b ‚äì b.val,
      by {intro b, apply le_inf, apply H_w b, apply witness_antichain_property},
    have this''' : ‚àÄ b, u =·¥Æ func w b ‚äì (œï (func B_small_witness b)) ‚â§ œï u,
      intro b, dsimp[w], rw[bv_eq_symm], apply h_congr, apply le_trans,
      exact this'' Œæ, convert this''' Œæ, apply (B_small_witness_spec _).symm,
   suffices H2 : (‚®Ü(b' : type (@B_small_witness _ _ œï)), œï (func B_small_witness b')) ‚â§ ‚®Ü(b : type (@B_small_witness _ _ œï)), (witness_antichain r) b,
   from le_trans H2 H1, apply supr_antichain2_contains},
    {apply le_supr}
end

lemma maximum_principle_verbose {œï : bSet ùîπ ‚Üí ùîπ} {h_congr : ‚àÄ x y, x =·¥Æ y ‚äì œï x ‚â§ œï y} {b : ùîπ} (h_eq_top L : (‚®Ü(x:bSet ùîπ), œï x) = b) : ‚àÉ u, œï u = b :=
 by cases maximum_principle œï h_congr with w h; from ‚ü®w, by finish‚ü©

/-- "‚àÉ x ‚àà u, œï x implies ‚àÉ x : bSet ùîπ, œï x", but this time, say it in Boolean -/
lemma weaken_ex_scope {Œ± : Type*} (A : Œ± ‚Üí bSet ùîπ) (œï : bSet ùîπ ‚Üí ùîπ)  : (‚®Ü(a : Œ±), œï (A a)) ‚â§ (‚®Ü(x : bSet ùîπ), œï x) :=
supr_le $ Œª a, le_supr_of_le (A a) (by refl)

lemma maximum_principle_bounded_top {œï : bSet ùîπ ‚Üí ùîπ} {h_congr : ‚àÄ x y, x =·¥Æ y ‚äì œï x ‚â§ œï y} {Œ± : Type*} {A : Œ± ‚Üí bSet ùîπ} (h_eq_top : (‚®Ü(a:Œ±), œï (A a)) = ‚ä§) : ‚àÉ u, œï u = ‚ä§ :=
@maximum_principle_verbose ùîπ (by apply_instance) œï h_congr ‚ä§ (by {have := weaken_ex_scope A œï, finish}) (by {have := weaken_ex_scope A œï, finish})

/-- Convert a Boolean-valued ‚àÄ‚àÉ-statement into a Prop-valued ‚àÄ‚àÉ-statement
  Given A : Œ± ‚Üí bSet ùîπ, a binary function œï : bSet ùîπ ‚Üí bSet ùîπ ‚Üí ùîπ, a truth-value assignment
  B : Œ± ‚Üí ùîπ, ‚àÄ i : Œ±, there exists a y_i : bSet ùîπ, such that
  (B i ‚üπ œï (A i) y_i) ‚â• ‚®Ö(i:Œ±), B i ‚üπ ‚®Ü(y : bSet ùîπ), œï(A i, bSet ùîπ)

  A more verbose, but maybe clearer way to see this is:
  if there is an equality (‚®Öi-‚®Üj body i j) = b,
  then for all i, there exists j, such that body i j ‚â• b

  This is a consequence of the maximum principle.
-/
lemma AE_convert {Œ± ùîπ : Type*} [nontrivial_complete_boolean_algebra ùîπ] (A : Œ± ‚Üí bSet ùîπ)
  (B : Œ± ‚Üí ùîπ) (œï : bSet ùîπ ‚Üí bSet ùîπ ‚Üí ùîπ) (h_congr : ‚àÄ x y z, x =·¥Æ y ‚äì œï z x ‚â§ œï z y) :
  ‚àÄ i : Œ±, ‚àÉ y : bSet ùîπ, (‚®Ö(j:Œ±), (B j ‚üπ ‚®Ü(z : bSet ùîπ), œï (A j) z)) ‚â§ (B i ‚üπ œï (A i) y) :=
Œª i,
  by {have := maximum_principle (Œª y, œï (A i) y)
                (by {intros x y, apply h_congr}),
      rcases this with ‚ü®u', H'‚ü©, use u', apply infi_le_of_le i,
      apply imp_le_of_right_le, from le_of_eq H'}  

section mixing_corollaries
-- The lemmas in this section are corollaries of the mixing lemma
variables (X u‚ÇÅ u‚ÇÇ : bSet ùîπ) (a‚ÇÅ a‚ÇÇ : ùîπ) (h_anti : a‚ÇÅ ‚äì a‚ÇÇ = ‚ä•) (h_partition : a‚ÇÅ ‚äî a‚ÇÇ = ‚ä§)

include h_partition
lemma two_term_mixture_mem_top (h‚ÇÅ : u‚ÇÅ ‚àà·¥Æ X = ‚ä§) (h‚ÇÇ : u‚ÇÇ ‚àà·¥Æ X = ‚ä§) :
  two_term_mixture a‚ÇÅ a‚ÇÇ h_anti u‚ÇÅ u‚ÇÇ ‚àà·¥Æ X = ‚ä§:=
begin
  let U := _, change U ‚àà·¥Æ X= _, apply top_unique,
  have : ‚ä§ ‚â§ U =·¥Æ u‚ÇÅ ‚äî U =·¥Æ u‚ÇÇ,
    by {rw[h_partition.symm],
       have := mixing_lemma_two_term a‚ÇÅ a‚ÇÇ h_anti u‚ÇÅ u‚ÇÇ,apply sup_le_sup, tidy},
  have : ‚ä§ ‚â§ (U =·¥Æ u‚ÇÅ ‚äî U =·¥Æ u‚ÇÇ) ‚äì (u‚ÇÅ ‚àà·¥Æ X ‚äì u‚ÇÇ ‚àà·¥Æ X),
    by finish,
  apply le_trans this, apply bv_or_elim_left;
    [rw[<-inf_assoc], ac_change (U =·¥Æ u‚ÇÇ ‚äì u‚ÇÇ ‚àà·¥Æ X) ‚äì u‚ÇÅ ‚àà·¥Æ X ‚â§ U ‚àà·¥Æ X];
    apply inf_le_left_of_le; rw[bv_eq_symm]; apply subst_congr_mem_left
end

lemma two_term_mixture_subset_top (H : a‚ÇÅ = u‚ÇÇ ‚äÜ·¥Æ u‚ÇÅ) :
  ‚ä§ ‚â§ u‚ÇÇ ‚äÜ·¥Æ (two_term_mixture a‚ÇÅ a‚ÇÇ h_anti u‚ÇÅ u‚ÇÇ) :=
begin
  let U := _, change _ ‚â§ u‚ÇÇ ‚äÜ·¥Æ U,
  rw[subset_unfold'], bv_intro w, apply bv_imp_intro,
  rw[top_inf_eq], simp only [mem_unfold], apply bv_Or_elim,
  intro i, fapply bv_use, exact ‚ü®ulift.up tt,i‚ü©, refine inf_le_inf _ (by refl),
  simp, rw[sup_inf_left_right_eq], repeat{apply bv_and_intro},
  {rw[h_partition], apply le_top},
  {apply le_sup_right_of_le, cases u‚ÇÇ, apply mem.mk},
  {have : a‚ÇÇ = - a‚ÇÅ, by apply eq_neg_of_partition; assumption,
   conv {to_rhs, congr, skip, rw[this, H]}, rw[sup_comm], change _ ‚â§ _ ‚üπ _,
   apply bv_imp_intro, rw[inf_comm], simp only [subset_unfold],
   apply bv_specialize_left i, apply bv_imp_elim},
  {apply le_sup_right_of_le, cases u‚ÇÇ, apply mem.mk}
end
end mixing_corollaries

lemma core_aux_lemma (œï : bSet ùîπ ‚Üí ùîπ) (h_congr : ‚àÄ x y, x =·¥Æ y ‚äì œï x ‚â§ œï y) (h_definite : (‚®Ü(w : bSet ùîπ), œï w) = ‚ä§) (v : bSet ùîπ) :
  ‚àÉ u : bSet ùîπ, œï u = ‚ä§ ‚àß œï v = u =·¥Æ v :=
begin
  have := maximum_principle œï h_congr, cases this with w H_w,
  let b := œï v, let u := two_term_mixture b (- b) (by simp) v w, use u,
  have h_partition : b ‚äî (- b) = ‚ä§, by simp,
  have H_max : œï u = ‚ä§,
    by {apply top_unique, rw[<-h_partition], apply le_trans,
    apply sup_le_sup, apply le_inf, apply (mixing_lemma_two_term _ _ _ _ _).left, exact -b, simp,
    exact v, exact w, refl, apply le_inf, apply (mixing_lemma_two_term _ _ _ _ _).right, exact b,
    simp, exact v, exact w, swap, exact œï w, rw[<-H_w, h_definite], apply le_top,
    apply bv_or_elim; rw[bv_eq_symm]; apply h_congr},
  refine ‚ü®H_max, _‚ü©,
  apply le_antisymm,
    {apply (mixing_lemma_two_term _ _ _ _ _).left},
    {suffices : u =·¥Æ v ‚äì œï u ‚â§ œï v,
      by {rw[H_max] at this, finish}, by apply h_congr}
end

lemma core_aux_lemma2 (œï œà : bSet ùîπ ‚Üí ùîπ) (h_congrœï : ‚àÄ x y, x =·¥Æ y ‚äì œï x ‚â§ œï y)
  (h_congrœà : ‚àÄ x y, x =·¥Æ y ‚äì œà x ‚â§ œà y) (h_sub : ‚àÄ u, œï u = ‚ä§ ‚Üí œà u = ‚ä§)
  (h_definite : (‚®Ü(w : bSet ùîπ), œï w) = ‚ä§) :
  (‚®Ö(x : bSet ùîπ), œï x ‚üπ œà x) = ‚ä§ :=
begin
  simp, intro x, have := core_aux_lemma œï h_congrœï h_definite x,
  rcases this with ‚ü®u, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©,
  have := h_sub u ‚Äπ_‚Ä∫, rw[show œï x = œï x ‚äì ‚ä§, by simp],
  rw[<-this, h‚ÇÇ], apply h_congrœà
end

section smallness'
variables {Œ± : Type u} (œï : bSet ùîπ ‚Üí Œ±)
-- in this section we prove the smallness-type arguments required for showing that cores always exist.
@[reducible, simp]noncomputable def fiber_lift' (b : œï '' set.univ) : {x : bSet ùîπ // œï x = b.val} :=
classical.indefinite_description (Œª a : bSet ùîπ, œï a = b.val) $
  by {cases b.property, use w, exact h.right}


-- include œï
-- def B_small_witness' : set $ bSet ùîπ :=
--   (Œª x, (fiber_lift' œï x).val) '' set.univ

-- @[simp]lemma B_small_witness_spec' : ‚àÄ x : bSet ùîπ, ‚àÉ y ‚àà (B_small_witness' œï), œï x = œï y :=
-- begin
--   intro x, refine ‚ü®(fiber_lift' œï _).val,_‚ü©,
--   use œï x, use x, finish,
--   split,
--     {unfold B_small_witness', use œï x, use x, tidy},
--     {rw[(fiber_lift' œï ‚ü®œï x, _‚ü©).property]}
-- end

end smallness'

section cores
@[reducible]def pullback_eq_rel {Œ± Œ≤ : Type*} (f : Œ± ‚Üí Œ≤) (E : Œ≤ ‚Üí Œ≤ ‚Üí Prop) : Œ± ‚Üí Œ± ‚Üí Prop :=
Œª a‚ÇÅ a‚ÇÇ, E (f a‚ÇÅ) (f a‚ÇÇ)

def core {Œ± : Type u} (u : bSet ùîπ) (S : Œ± ‚Üí bSet ùîπ) : Prop :=
(‚àÄ x : Œ±, S x ‚àà·¥Æ u = ‚ä§) ‚àß (‚àÄ y : bSet ùîπ, y ‚àà·¥Æ u = ‚ä§ ‚Üí ‚àÉ! x_y : Œ±, y =·¥Æ S x_y = ‚ä§)

/-- This is the "f_x" in the notes. We are free to use function types since universes are inaccessible. -/
def core.mk_œï (u : bSet ùîπ) : bSet ùîπ ‚Üí (u.type ‚Üí ùîπ) :=
Œª x, (Œª a, (u.bval a) ‚äì x =·¥Æ u.func a )

lemma core.mk_œï_inj (u : bSet ùîπ) (x y : bSet ùîπ) : (x ‚àà·¥Æ u = ‚ä§) ‚Üí (y ‚àà·¥Æ u = ‚ä§) ‚Üí core.mk_œï u x = core.mk_œï u y ‚Üí x =·¥Æ y = ‚ä§ :=
begin
  intros h‚ÇÅ h‚ÇÇ H, unfold core.mk_œï at H, replace H := congr_fun H,
  apply top_unique,
  have : ‚àÄ i_z : u.type, u.bval i_z ‚äì x =·¥Æ u.func i_z ‚äì u.bval i_z ‚äì u.func i_z =·¥Æ y  ‚â§ x =·¥Æ y :=
    Œª i_z, by {apply le_trans, show _ ‚â§ x =·¥Æ u.func i_z ‚äì u.func i_z =·¥Æ y, apply le_inf,
    iterate 2 {apply inf_le_left_of_le}, apply inf_le_right_of_le, refl, swap, apply bv_eq_trans,
    repeat{apply inf_le_right_of_le}, refl}, dsimp at H,
    simp[show ‚àÄ a, y =·¥Æ func u a = func u a =·¥Æ y, by {intro, apply bv_eq_symm}] at H,
  have this' :  (‚àÄ (i_z : type u), bval u i_z ‚äì x =·¥Æ func u i_z ‚äì bval u i_z ‚äì func u i_z =·¥Æ y ‚â§ x =·¥Æ y) ‚Üî 
          ‚àÄ (i_z : type u), ((bval u i_z ‚äì x =·¥Æ func u i_z) ‚äì (bval u i_z ‚äì func u i_z =·¥Æ y) ‚â§ x =·¥Æ y),
    by {apply forall_congr, intro a, apply iff_of_eq, ac_refl},
  rw[this'] at this, simp[H] at this, rw[<-supr_le_iff] at this, apply le_trans _ this, rw[eq_top_iff] at h‚ÇÇ,
  convert h‚ÇÇ, simp[mem_unfold], congr' 1, ext, congr' 1, apply bv_eq_symm
end

noncomputable def core.S' (u : bSet ùîπ) : (core.mk_œï u '' set.univ) ‚Üí bSet ùîπ :=
  Œª x, (fiber_lift' (core.mk_œï u) x).val

def core.Œ±_S'' (u : bSet ùîπ) : Type u := {i : core.mk_œï u '' set.univ // core.S' u i ‚àà·¥Æ u = ‚ä§}

noncomputable def core.S'' (u : bSet ùîπ) : core.Œ±_S'' u ‚Üí bSet ùîπ := Œª x, core.S' u x.val

lemma core.S'_spec (u : bSet ùîπ) (x : core.mk_œï u '' set.univ) : core.mk_œï u (core.S' u x) = x.val :=
 by unfold core.S'; simp[(fiber_lift' (core.mk_œï u) x).property]

def core.bv_eq_top : bSet ùîπ ‚Üí bSet ùîπ ‚Üí Prop :=
  Œª x‚ÇÅ x‚ÇÇ, x‚ÇÅ =·¥Æ x‚ÇÇ = ‚ä§

def core.bv_eq_top_setoid : setoid $ bSet ùîπ :=
{ r := core.bv_eq_top,
  iseqv :=
begin
  repeat{split},
  {apply bv_eq_refl},
  {dsimp[core.bv_eq_top], tidy, rwa[bv_eq_symm]},
  {dsimp[core.bv_eq_top], tidy, apply top_unique, rw[show ‚ä§ = x =·¥Æ y ‚äì y =·¥Æ z, by finish],
   apply bv_eq_trans}
end}

instance core.S''_setoid (u : bSet ùîπ) : setoid $ core.Œ±_S'' u :=
{ r := pullback_eq_rel (core.S'' u) core.bv_eq_top,
  iseqv :=
begin
  repeat{split}, intro x, apply bv_eq_refl,
  intros x y, intro H, unfold pullback_eq_rel core.bv_eq_top, rwa[bv_eq_symm],
  intros x y z, unfold pullback_eq_rel core.bv_eq_top, intros H‚ÇÅ H‚ÇÇ, apply top_unique,
  rw[show ‚ä§ = (core.S'' u x) =·¥Æ (core.S'' u y) ‚äì (core.S'' u y) =·¥Æ (core.S'' u z), by finish],
  apply bv_eq_trans
end}

noncomputable def core.mk_aux (u : bSet ùîπ) : (quotient (@core.S''_setoid ùîπ _ u)) ‚Üí bSet ùîπ :=
  Œª x, (core.S'' u) (@quotient.out _ (core.S''_setoid u ) x)

@[reducible]private def image.mk {Œ± Œ≤ : Type*} {f : Œ± ‚Üí Œ≤} (a : Œ±) : f '' set.univ :=
  ‚ü®f a, by tidy‚ü©

lemma core.mk (u : bSet ùîπ) : ‚àÉ Œ± : Type u, ‚àÉ S : Œ± ‚Üí bSet ùîπ, core u S :=
begin
  repeat{split}, show _ ‚Üí bSet ùîπ, exact core.mk_aux u,
  {dsimp, intro x,unfold core.mk_aux, let y := _, change core.S'' u y ‚àà·¥Æ u = _, apply y.property},
  {intros y H_y, let y' := (core.S' u (image.mk y)),
   have H_y' : core.mk_œï u y = core.mk_œï u y',
     by rw[core.S'_spec],
   have H_y'2 : y' ‚àà·¥Æ u = ‚ä§,
     by {unfold core.mk_œï at H_y', have := congr_fun H_y',
         simp only [mem_unfold], apply top_unique,
         conv {to_rhs, congr, rw[<-H_y']},
         simpa[mem_unfold] using H_y},

   let y'' := (core.mk_aux u ‚ü¶by split; exact H_y'2‚üß),
   have H_y'' : y'' =·¥Æ y' = ‚ä§,
     by {dsimp[y''], unfold core.mk_aux, have := quotient.mk_out,
      show setoid _, exact core.S''_setoid u, apply this},
   have H‚ÇÉ : y =·¥Æ y' = ‚ä§,
     by {apply core.mk_œï_inj, repeat{assumption}},
   have H‚ÇÅ : y =·¥Æ y'' = ‚ä§,
     by {apply top_unique, apply le_trans, show ùîπ, from y =·¥Æ y' ‚äì y' =·¥Æ y'',
           apply le_inf,
             {rw[<-eq_top_iff], exact H‚ÇÉ},
             {rw[<-eq_top_iff], convert H_y'' using 1, apply bv_eq_symm},
         apply bv_eq_trans},
   split, refine ‚ü®H‚ÇÅ, _‚ü©, intros i H_y''',
   suffices : core.mk_aux u i =·¥Æ y' = ‚ä§,
     by {have : core.mk_aux u i =·¥Æ y'' = ‚ä§, by {apply top_unique, rw[eq_top_iff] at *,
         apply bv_context_trans this, convert H_y'' using 1, apply bv_eq_symm},
         dsimp[y''] at this, unfold core.mk_aux at this_1,
         have : ‚ü¶quotient.out i‚üß = ‚ü¶quotient.out ‚ü¶‚ü®image.mk y, H_y'2‚ü©‚üß‚üß,
           by {apply quotient.sound, exact this_1},
         convert this using 1; rw[quotient.out_eq]},
   apply top_unique, rw[bv_eq_symm] at H_y''',
     rw[show ‚ä§ = (core.mk_aux u i =·¥Æ y ‚äì y =·¥Æ y'), by {dsimp at H_y''', rw [H‚ÇÉ, H_y'''], simp}],
   apply bv_eq_trans}
end

lemma exists_mem_of_nonempty (u : bSet ùîπ) {Œì : ùîπ} {H : Œì ‚â§ -(u =·¥Æ ‚àÖ)} : Œì ‚â§ ‚®Üx, x‚àà·¥Æ u :=
by {apply le_trans H, simp[eq_empty], intro x, apply bv_use (u.func x), apply mem.mk'}

lemma core_aux_lemma3 (u : bSet ùîπ) (h_nonempty : -(u =·¥Æ ‚àÖ) = ‚ä§) {Œ± : Type u} (S : Œ± ‚Üí bSet ùîπ) (h_core : core u S) : ‚àÄ x, ‚àÉ y ‚àà S '' set.univ, x =·¥Æ y = x ‚àà·¥Æ u :=
begin
  intro x, have := core_aux_lemma (Œª z, z‚àà·¥Æu) (by intros; apply subst_congr_mem_left)
    (by {apply top_unique, apply exists_mem_of_nonempty, simpa}) x,
    rcases this with ‚ü®y, ‚ü®H‚ÇÅ, H‚ÇÇ‚ü©‚ü©, cases h_core with H_left H_right,
    specialize H_right y H‚ÇÅ, cases H_right with y' H_y',
    use S y', specialize H_left y', split, use y', finish,
    dsimp at H‚ÇÅ H‚ÇÇ, rw[H‚ÇÇ], cases H_y', have := bv_rw H_y'_left (Œª z, x =·¥Æ z),
    simpa[bv_eq_symm] using this, intros x‚ÇÅ y‚ÇÅ, dsimp, rw[inf_comm], apply bv_eq_trans
end

end cores

section check_names
/- `check` is the canonical embedding of pSet into bSet.
note that a check-name is not only definite, but recursively definite
-/
@[simp]def check : (pSet : Type (u+1)) ‚Üí bSet ùîπ
| ‚ü®Œ±,A‚ü© := ‚ü®Œ±, Œª a, check (A a), Œª a, ‚ä§‚ü©

postfix `Ãå `:90 := check

example : let x := pSet.empty in (xÃå : bSet ùîπ) = bSet.empty :=
  by dsimp[check, pSet.empty, bSet.empty]; simp; fsplit; ext1; repeat{cases x}

lemma check_bv_eq_top_of_equiv {x y : pSet} :
  pSet.equiv x y ‚Üí xÃå =·¥Æ yÃå = (‚ä§ : ùîπ) :=
begin
  induction x generalizing y, cases y,
  dsimp[check], simp only [pSet.equiv, lattice.top_le_iff, bSet.check,
  lattice.top_inf_eq, lattice.imp_top_iff_le, lattice.inf_eq_top_iff, lattice.infi_eq_top],
  intros a, cases a, split; intro i;
  apply top_unique; [rcases a_left i with ‚ü®w, h‚ü©, rcases a_right i with ‚ü®w,h‚ü©];
  apply le_supr_of_le w; simp only [lattice.top_le_iff, bSet.check]; apply (x_ih _); exact h
end

lemma check_bv_eq_bot_of_not_equiv {x y : pSet} :
  (¬¨ pSet.equiv x y) ‚Üí (xÃå =·¥Æ yÃå) = (‚ä• : ùîπ) :=
begin
  induction x generalizing y, cases y, dsimp[check], intro H, apply bot_unique,
  cases pSet.not_equiv H with H H; cases H with w H_w;
  [apply inf_le_left_of_le, apply inf_le_right_of_le]; apply infi_le_of_le (w); simp[-le_bot_iff];
  intro a'; rw[le_bot_iff]; apply x_ih; apply H_w
end

lemma check_bv_eq_dichotomy (x y : pSet) :
  (xÃå =·¥Æ yÃå = (‚ä§ : ùîπ)) ‚à® (xÃå =·¥Æ yÃå = (‚ä• : ùîπ)) :=
begin
  haveI : decidable (pSet.equiv x y) := by apply classical.prop_decidable,
  by_cases pSet.equiv x y; [left, right];
  [apply check_bv_eq_top_of_equiv, apply check_bv_eq_bot_of_not_equiv]; assumption
end

lemma check_bv_eq_iff {x y : pSet} 
: pSet.equiv x y ‚Üî xÃå =·¥Æ yÃå = (‚ä§ : ùîπ) :=
begin
  induction x generalizing y, cases y,
  dsimp[check], simp only [pSet.equiv, lattice.top_le_iff, bSet.check,
    lattice.top_inf_eq, lattice.imp_top_iff_le, lattice.inf_eq_top_iff, lattice.infi_eq_top],
  fsplit, 
  work_on_goal 0 { intros a, cases a, fsplit, work_on_goal 0 { intros i },
  work_on_goal 1 { intros i } }, work_on_goal 2 { intros a, cases a, fsplit,
  work_on_goal 0 { intros a}}, work_on_goal 3 {intros b},
  {apply top_unique, rcases a_left i with ‚ü®w, h‚ü©,  apply le_supr_of_le w,
   simp only [lattice.top_le_iff, bSet.check], apply (x_ih _).mp, exact h},
  {apply top_unique, rcases a_right i with ‚ü®w, h‚ü©,  apply le_supr_of_le w,
   simp only [lattice.top_le_iff, bSet.check], apply (x_ih _).mp, exact h},
   all_goals{have := supr_eq_top_max, cases this with w h, use w, apply (x_ih _).mpr, apply h,
   exact nontrivial.bot_lt_top}, apply a_left, work_on_goal 1 {apply a_right},
   all_goals{intros a' H, have := check_bv_eq_dichotomy (x_A ‚Äπx_Œ±‚Ä∫) (y_A ‚Äπy_Œ±‚Ä∫), tidy}
end

end check_names

/-- The axiom of weak replacement says that for every œï(x,y),
    for every set u, ‚àÄ x ‚àà u, ‚àÉ y œï (x,y) implies there exists a set v
    which contains the image of u under œï. With the other axioms,
    this should be equivalent to the usual axiom of replacement. -/
theorem bSet_axiom_of_weak_replacement (œï : bSet ùîπ ‚Üí bSet ùîπ ‚Üí ùîπ) (h_congr : ‚àÄ x y z, x =·¥Æ y ‚äì œï z x ‚â§ œï z y) (u : bSet ùîπ) :
  (‚®Ö(i:u.type), (u.bval i ‚üπ (‚®Ü(y : bSet ùîπ), œï (u.func i) y))) ‚üπ
  (‚®Ü(v : bSet ùîπ), (‚®Ö(i : u.type), u.bval i ‚üπ (‚®Ü(j:v.type), œï (u.func i) (v.func j)))) = ‚ä§ :=
begin
  simp only [bSet.bval, lattice.imp_top_iff_le, bSet.func, bSet.type],
  rcases (classical.axiom_of_choice (AE_convert u.func u.bval œï h_congr)) with ‚ü®wit, wit_property‚ü©, dsimp at wit wit_property,
  fapply le_supr_of_le, exact ‚ü®u.type, wit, Œª _, ‚ä§‚ü©,
    {simp, intro i, apply le_trans (wit_property i),
     apply imp_le_of_right_le, exact le_supr (Œª x, œï (func u i) (wit x)) i}
end

/-- The boolean-valued unionset operator -/
def bv_union (u : bSet ùîπ) : bSet ùîπ :=
  ‚ü®Œ£(i : u.type), (u.func i).type, Œª x, (u.func x.1).func x.2,
       Œª x, ‚®Ü(y : u.type), (u.func x.1).func x.2 ‚àà·¥Æ (u.func y)‚ü©

lemma func_cast {u x : bSet ùîπ} {i_y : u.type} {Œ± : Type u} {A : Œ± ‚Üí bSet ùîπ} {B : Œ± ‚Üí ùîπ} {h : func u i_y = mk Œ± A B} {i_x' : Œ±} : func (func u i_y) (eq.mpr (by rw[h]; refl) i_x') = A i_x' :=
begin
  change _ = (mk Œ± A B).func i_x',
  have : func (mk Œ± A B) (eq.mpr rfl i_x') = func (mk Œ± A B) i_x', by refl,
  convert this
end

lemma bv_union_spec (u : bSet ùîπ) : ‚ä§ ‚â§ ‚®Ö (x : bSet ùîπ), (x ‚àà·¥Æ bv_union u ‚üπ ‚®Ü (y : type u), x ‚àà·¥Æ func u y) ‚äì
        ((‚®Ü (y : type u), x ‚àà·¥Æ func u y) ‚üπ x ‚àà·¥Æ bv_union u) :=
begin
  simp only [lattice.top_le_iff, bSet.mem, lattice.imp_top_iff_le,
  lattice.inf_eq_top_iff, bSet.func, lattice.le_infi_iff, bSet.type, lattice.supr_le_iff],
  intros x, fsplit, work_on_goal 1 { intros i_y },
  {dsimp[bv_union], apply supr_le, rintro ‚ü®i_y', i_x'‚ü©,
   rw[supr_inf_eq], apply supr_le, intro i_y'', dsimp,
   apply le_supr_of_le i_y'', cases (func u i_y''),
   unfold mem, rw[supr_inf_eq], apply supr_le_supr, intro j,
   rw[inf_assoc], apply inf_le_inf, refl, rw[inf_comm], apply bv_eq_trans},
  {unfold bv_union, dsimp, destruct (func u i_y), intros Œ± A B h, rw[h], apply supr_le, intro i_x',
   fapply le_supr_of_le, use i_y, rw[h], exact i_x', dsimp,
   rw[supr_inf_eq], apply le_supr_of_le i_y, apply inf_le_inf,
   swap, apply bv_eq_le_congr_right, apply func_cast.symm, repeat{assumption},
   have := @mem.mk ùîπ _ Œ± A B i_x', convert this, apply func_cast, repeat{assumption}}
end

theorem bSet_axiom_of_union : (‚®Ö (u : bSet ùîπ), (‚®Ü(v : _), ‚®Ö(x : _),
  (x ‚àà·¥Æ v ‚áî (‚®Ü(y : u.type), x ‚àà·¥Æ u.func y)))) = ‚ä§ :=
begin
  simp only [bSet.mem, lattice.biimp, bSet.func, lattice.infi_eq_top, bSet.type], intro u,
  apply top_unique, apply le_supr_of_le (bv_union u), apply bv_union_spec
end

@[reducible, simp]def set_of_indicator {u : bSet ùîπ} (f : u.type ‚Üí ùîπ) : bSet ùîπ :=
  ‚ü®u.type, u.func, f‚ü©

@[reducible, simp]def set_of_indicator' {u : bSet ùîπ} (f : u.type ‚Üí ùîπ) : bSet ùîπ :=
  ‚ü®u.type, u.func, Œª i, f i ‚äì u.bval i‚ü©

def bv_powerset (u : bSet ùîπ) : bSet ùîπ :=
‚ü®u.type ‚Üí ùîπ, Œª f, set_of_indicator f, Œª f, set_of_indicator f ‚äÜ·¥Æ u‚ü©

def bv_powerset' (u : bSet ùîπ) : bSet ùîπ :=
‚ü®u.type ‚Üí ùîπ, Œª f, set_of_indicator' f, Œª f, ‚ä§‚ü©

--TODO (jesse) try proving bv_powerset and bv_powerset' are equivalent

example {u : bSet ùîπ} : bv_powerset u =·¥Æ bv_powerset' u = ‚ä§ :=
begin
  apply top_unique, apply le_trans, swap, apply bSet_axiom_of_extensionality,
  bv_intro z, apply le_inf; apply bv_imp_intro; simp[top_inf_eq],
  {unfold bv_powerset, dsimp, apply supr_le, intro f,
  unfold bv_powerset', simp, apply le_supr_of_le f,
   refine le_trans _ (by apply bSet_axiom_of_extensionality),
   bv_intro z',
   have := @bounded_quantification _ _ (set_of_indicator f) (Œª x, x ‚àà·¥Æ u), dsimp[set_of_indicator] at this, rw[this],
   rw[deduction], apply infi_le_of_le z', rw[supr_imp_eq],
   apply bv_imp_intro, apply le_inf, apply bv_imp_intro,
   ac_change  (‚®Ö (i : type u), f i ‚äì z' =·¥Æ func u i ‚üπ z' ‚àà·¥Æ u) ‚äì (z =·¥Æ mk (type u) (func u) f ‚äì z' ‚àà·¥Æ z) ‚â§ z' ‚àà·¥Æ mk (type u) (func u) (Œª (i : type u), f i ‚äì bval u i),
   apply le_trans, apply inf_le_inf, refl, apply subst_congr_mem_right,
   rw[inf_comm], rw[deduction], apply supr_le, intro i',
   rw[<-deduction], apply le_supr_of_le i', dsimp,
   repeat{apply le_inf}, apply inf_le_left_of_le, apply inf_le_left_of_le, refl,
   repeat{sorry}

},
  {sorry}
end

theorem bSet_axiom_of_powerset : (‚®Ö(u : bSet ùîπ), ‚®Ü(v : _), ‚®Ö(x : bSet ùîπ), x‚àà·¥Æ v ‚áî ‚®Ö(y : x.type), x.bval y ‚üπ (x.func y ‚àà·¥Æ u)) = ‚ä§:=
begin
  simp only [bSet.bval, bSet.mem, lattice.biimp, bSet.func, lattice.infi_eq_top, bSet.type],
  intro u, apply top_unique, apply le_supr_of_le (bv_powerset u),
  bv_intro x, apply le_inf,
  {rw[<-deduction, top_inf_eq], 
   unfold bv_powerset, apply supr_le, intro œá,
   suffices : ((set_of_indicator œá) ‚äÜ·¥Æ u ‚äì (x =·¥Æ (set_of_indicator œá)) : ùîπ) ‚â§ x ‚äÜ·¥Æ u,
     by {convert this, simp},
   apply subst_congr_subset_left},

  {simp, have := @bounded_quantification _ _ x (Œª y, (y ‚àà·¥Æ u)) (by {intros x y, apply subst_congr_mem_left}), rw[this],
  dsimp,
  unfold bv_powerset, simp, fapply le_supr_of_le,
  from Œª i, u.func i ‚àà·¥Æ x,  have this' := @bounded_quantification _ _ (set_of_indicator (Œª y, (u.func y ‚àà·¥Æ x))) (Œª y, (y ‚àà·¥Æ u)) (by {intros x y, apply subst_congr_mem_left}), dsimp at this', rw[this'],
  apply le_inf, bv_intro a', apply infi_le_of_le a', rw[supr_imp_eq],
  bv_intro i_y, apply imp_le_of_left_right_le, swap, refl,
  rw[inf_comm, bv_eq_symm], apply subst_congr_mem_left,
  
  rw[bv_eq_unfold], apply le_inf,
  {conv {to_rhs, dsimp}, have := @bounded_quantification _ _ x (Œª y, ‚®Ü (a' :    type u), func u a' ‚àà·¥Æ x ‚äì y =·¥Æ func u a'), rw[this], swap,
  intros a‚ÇÅ a‚ÇÇ, dsimp, rw[inf_supr_eq], apply supr_le, intro i,

  apply le_supr_of_le i,
  ac_change (a‚ÇÇ =·¥Æ a‚ÇÅ ‚äì  a‚ÇÅ =·¥Æ func u i) ‚äì func u i ‚àà·¥Æ x ‚â§ func u i ‚àà·¥Æ x ‚äì a‚ÇÇ =·¥Æ func u i, rw[bv_eq_symm], ac_refl,
  
  apply le_trans, apply inf_le_inf, apply bv_eq_trans, refl, rw[inf_comm],
  
  {bv_intro a‚ÇÅ, dsimp, apply infi_le_of_le a‚ÇÅ, rw[<-deduction],
   apply le_trans, apply bv_imp_elim', rw[inf_comm, deduction],
   rw[mem_unfold], apply supr_le, intro i, rw[<-deduction],
   apply le_supr_of_le i,
   apply le_inf, rw[inf_assoc], apply inf_le_right_of_le,
   apply subst_congr_mem_left,
   ac_change a‚ÇÅ =·¥Æ func u i ‚äì (bval u i ‚äì a‚ÇÅ ‚àà·¥Æ x) ‚â§ a‚ÇÅ =·¥Æ func u i,
   apply inf_le_left_of_le, refl}},

   {have := @bounded_quantification _ _ (set_of_indicator (Œª y, func _ y ‚àà·¥Æ x)) (Œª y, y ‚àà·¥Æ x), rw[this], swap, simp[subst_congr_mem_left],
   bv_intro a‚ÇÅ, apply infi_le_of_le a‚ÇÅ,
   unfold set_of_indicator, dsimp, rw[supr_imp_eq],
   bv_intro i, apply from_empty_context,
   rw[inf_comm, bv_eq_symm], simp[-bv_eq_symm,subst_congr_mem_left]}},
end

@[simp, reducible]def axiom_of_infinity_spec (u : bSet ùîπ) : ùîπ :=
  (‚àÖ‚àà·¥Æ u) ‚äì (‚®Ö(i_x : u.type), ‚®Ü(i_y : u.type), (u.func i_x ‚àà·¥Æ u.func i_y))

theorem bSet_axiom_of_infinity : (‚®Ü(u : bSet ùîπ), axiom_of_infinity_spec u) = ‚ä§ :=
begin
  simp, apply top_unique, apply le_supr_of_le, repeat{sorry}
end -- maybe we can just define boolean-valued œâ in this case directly

theorem bSet_axiom_of_regularity (œï : bSet ùîπ ‚Üí ùîπ) (h_congr : ‚àÄ x y, x =·¥Æ y ‚äì œï x ‚â§ œï y) :
  (‚®Ö(x : bSet ùîπ), ((‚®Ö(y : bSet ùîπ), y ‚àà·¥Æ x ‚üπ œï y) ‚üπ œï x)) ‚üπ (‚®Ö(x : bSet ùîπ), œï x) = ‚ä§ :=
begin
  apply top_unique, apply bv_imp_intro, rw[top_inf_eq],
  bv_intro x, let b := _, change b ‚â§ _,
  induction x with Œ± A B ih, dsimp at *,
  have : b ‚â§ ‚®Ö(i_y:Œ±), B i_y ‚üπ œï (A i_y),
    by {bv_intro i_y, specialize ih i_y, apply le_trans ih,
    rw[<-deduction], apply inf_le_left},
  have h := @bounded_quantification _ _ (mk Œ± A B) œï h_congr,
  simp only with cleanup at h, rw[h] at this,
  -- simp only with cleanup at this, rw[this],
  apply bv_have this,
  have : b ‚â§ (‚®Ö (y : bSet ùîπ), (y) ‚àà·¥Æ (mk Œ± A B) ‚üπ œï (y)) ‚üπ œï (mk Œ± A B),
    by {apply bv_specialize (mk Œ± A B), refl},
  rw[deduction], apply le_trans this, rw[<-deduction], apply bv_imp_elim
end

/-- ‚àÉ! x, œï x ‚Üî ‚àÉ x ‚àÄ y, œï(x) ‚äì œï (y) ‚Üí y = x -/
@[reducible]def bv_exists_unique (œï : bSet ùîπ ‚Üí ùîπ) : ùîπ :=
  ‚®Ü(x:bSet ùîπ), (‚®Ö(y : bSet ùîπ), œï y ‚üπ (y =·¥Æ x))

local notation `‚®Ü!` binders `, ` r:(scoped f, bv_exists_unique f) := r

/-- ‚àÄ x, ((‚àÄ y, y ‚äÜ x ‚àß ‚àÄ w‚ÇÅ w‚ÇÇ ‚àà y, w‚ÇÅ ‚äÜ w‚ÇÇ ‚à® w‚ÇÇ ‚äÜ w‚ÇÅ) ‚Üí (‚ãÉy) ‚àà x)
      ‚Üí ‚àÉ c ‚àà x, ‚àÄ z ‚àà x, c ‚äÜ x ‚Üí c = x -/
theorem bSet_zorns_lemma (X : bSet ùîπ) : ‚ä§ ‚â§ (‚®Öy, (y ‚äÜ·¥Æ X ‚äì (‚®Ö(w‚ÇÅ : bSet ùîπ), ‚®Ö(w‚ÇÇ : bSet ùîπ),
  w‚ÇÅ ‚àà·¥Æ y ‚äì w‚ÇÅ ‚àà·¥Æ y ‚üπ (w‚ÇÅ ‚äÜ·¥Æ w‚ÇÇ ‚äî w‚ÇÇ ‚äÜ·¥Æ w‚ÇÅ))) ‚üπ (bv_union y ‚àà·¥Æ X))
    ‚üπ (‚®Üc, c ‚àà·¥Æ X ‚äì (‚®Öz, z ‚àà·¥Æ X ‚üπ (c ‚äÜ·¥Æ X ‚üπ c =·¥Æ z))) := sorry

-- /-- This is the abbreviated version of AC found at http://us.metamath.org/mpeuni/ac3.html
--     It is provably equivalent over ZF to the usual formulation of AC
--     After we have the Boolean soundness theorem, we can transport the proof via completeness
--     from the 2-valued setting to the ùîπ-valued setting -/
-- -- ‚àÄx ‚àÉùë¶ ‚àÄùëß ‚àà ùë• (ùëß ‚â† ‚àÖ ‚Üí ‚àÉ!ùë§ ‚àà ùëß ‚àÉùë£ ‚àà ùë¶ (ùëß ‚àà ùë£ ‚àß ùë§ ‚àà ùë£))
-- theorem bSet_axiom_of_choice :
-- (‚®Ö(x : bSet ùîπ), ‚®Ü(y : bSet ùîπ), ‚®Ö(z : bSet ùîπ),
--   z ‚àà·¥Æ x ‚üπ ((- (z =·¥Æ ‚àÖ)) ‚üπ
--   (‚®Ü!(w : bSet ùîπ), w ‚àà·¥Æ z ‚üπ
--     ‚®Ü(v : bSet ùîπ), v ‚àà·¥Æ y ‚üπ (z ‚àà·¥Æ v ‚äì w ‚àà·¥Æ v)))) = ‚ä§ := sorry

end bSet
