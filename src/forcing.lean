import .bvm_extras .pSet_ordinal

open ordinal cardinal lattice bSet

noncomputable theory

local infix ` ‚üπ `:65 := lattice.imp

local infix ` ‚áî `:50 := lattice.biimp

universe u

namespace pSet

@[reducible]noncomputable def ‚Ñµ‚ÇÅ : pSet.{0} := ordinal.mk (aleph 1).ord

@[reducible]noncomputable def ‚Ñµ‚ÇÇ : pSet.{0} := ordinal.mk (aleph 2).ord

@[simp, cleanup]lemma Union_type {x : pSet} : (type (Union x)) = Œ£(a:x.type), (x.func a).type :=
by induction x; refl

@[simp, cleanup]lemma Union_type' {Œ± : Type u} {A : Œ± ‚Üí pSet.{u}} :
  (Union (mk Œ± A)).type = Œ£a, (A a).type := rfl

end pSet

open pSet

-- /-- A well-ordered type order-isomorphic to ‚Ñµ‚ÇÇ -/
-- @[reducible]noncomputable def ‚Ñµ‚ÇÇ' : Well_order.{0} := (aleph 2).ord.out

-- /-- (‚Ñï, <) is, by definition, a well-ordered type order-isomorphic to ‚Ñµ‚ÇÄ -/
-- def ‚Ñµ‚ÇÄ' : Well_order.{0} := ‚ü®‚Ñï, (<), by apply_instance‚ü©


def is_regular_open : set (set(‚Ñµ‚ÇÇ.type √ó ‚Ñï)) ‚Üí Prop := sorry

def ùîπ : Type := {S // is_regular_open S}
instance ùîπ_boolean_algebra : nontrivial_complete_boolean_algebra ùîπ := sorry
/-- The principal regular open associated to a pair (ŒΩ, n) is the collection of all subsets of
    ‚Ñµ‚ÇÇ √ó ‚Ñï which contain (ŒΩ, n). -/
def principal_open (ŒΩ : (‚Ñµ‚ÇÇÃå  : bSet ùîπ).type) (n : ‚Ñï) : ùîπ :=
begin
  simp at ŒΩ, use {S | (ŒΩ,n) ‚àà S}, sorry
end

namespace cohen_real

/-- `cohen_real.œá ŒΩ` is the indicator function on ‚Ñï induced by every ordinal less than ‚Ñµ‚ÇÇ -/
def œá (ŒΩ : (‚Ñµ‚ÇÇÃå  : bSet ùîπ).type) : ‚Ñï ‚Üí ùîπ :=
  Œª n, principal_open ŒΩ n

/-- `cohen_real.mk ŒΩ` is the subset of (œâ : bSet ùîπ) induced by `cohen_real.œá ŒΩ` -/
def mk (ŒΩ : (‚Ñµ‚ÇÇÃå  : bSet ùîπ).type) : bSet ùîπ :=
  @set_of_indicator ùîπ _ omega $ Œª n, œá ŒΩ n.down

/-- bSet ùîπ believes that each `mk ŒΩ` is a subset of omega -/
lemma definite {ŒΩ} {Œì} : Œì ‚â§ mk ŒΩ ‚äÜ·¥Æ omega :=
by simp[mk, subset_unfold]; from Œª _, by {bv_imp_intro, from omega_definite}

/-- bSet ùîπ believes that each `mk ŒΩ` is an element of ùí´(œâ) -/
lemma definite' {ŒΩ} {Œì} : Œì ‚â§ mk ŒΩ ‚àà·¥Æ bv_powerset omega := bv_powerset_spec.mp definite

/-- Whenever ŒΩ‚ÇÅ ‚â† ŒΩ‚ÇÇ < ‚Ñµ‚ÇÇ, bSet ùîπ believes that `mk ŒΩ‚ÇÅ` and `mk ŒΩ‚ÇÇ` are distinct -/
lemma inj {ŒΩ‚ÇÅ ŒΩ‚ÇÇ} (H_neq : ŒΩ‚ÇÅ ‚â† ŒΩ‚ÇÇ) : (mk ŒΩ‚ÇÅ) =·¥Æ (mk ŒΩ‚ÇÇ) ‚â§ ‚ä• :=
sorry -- this lemma requires us to view the Cohen poset as a dense subset of ùîπ
-- see Lemma 5.22 in flypitch-notes

end cohen_real

local notation `‚Ñµ‚ÇÄ` := (omega : bSet ùîπ)

local notation `ùî†` := (bv_powerset ‚Ñµ‚ÇÄ : bSet ùîπ)

lemma Card_‚Ñµ‚ÇÅ : ‚ä§ ‚â§ Card(‚Ñµ‚ÇÅÃå  : bSet ùîπ) := sorry

lemma Card_‚Ñµ‚ÇÇ : ‚ä§ ‚â§ Card (‚Ñµ‚ÇÇÃå  : bSet ùîπ) := sorry

lemma ‚Ñµ‚ÇÄ_lt_‚Ñµ‚ÇÅ : ‚ä§ ‚â§ ‚Ñµ‚ÇÄ ‚àà·¥Æ ‚Ñµ‚ÇÅÃå  := sorry

lemma ‚Ñµ‚ÇÅ_lt_‚Ñµ‚ÇÇ : ‚ä§ ‚â§ (‚Ñµ‚ÇÅÃå : bSet ùîπ) ‚àà·¥Æ (‚Ñµ‚ÇÇÃå : bSet ùîπ) := sorry


noncomputable def neg_CH_func : bSet ùîπ := @function.mk _ _ (‚Ñµ‚ÇÇÃå )
  (Œª x, cohen_real.mk x)
begin
  sorry
end
theorem ‚Ñµ‚ÇÇ_le_ùî† : ‚ä§ ‚â§ is_func' (‚Ñµ‚ÇÇÃå ) ùî† (neg_CH_func) ‚äì is_inj (neg_CH_func) :=
begin
apply le_inf,

  {unfold neg_CH_func, apply le_inf, apply le_inf, apply mk_is_func,
    simp only [subset_unfold] with cleanup,
    bv_intro ŒΩ, bv_imp_intro, 
    have : Œì ‚â§ (‚Ñµ‚ÇÇÃå ).func ŒΩ ‚àà·¥Æ ‚Ñµ‚ÇÇÃå  ‚äì (cohen_real.mk ŒΩ ‚àà·¥Æ bv_powerset ‚Ñµ‚ÇÄ),
      by {apply le_inf, from le_trans H (by apply mem.mk'),
          from cohen_real.definite'},
    from le_trans this (by apply prod_mem),

    bv_intro w‚ÇÅ, bv_imp_intro, rw[mem_unfold] at H,
    bv_cases_at H ŒΩ, apply bv_use (cohen_real.mk ŒΩ),
    rw[mem_unfold], apply bv_use ŒΩ, bv_split,
    from le_inf ‚Äπ_‚Ä∫ (by apply le_trans H_1_right; apply subst_congr_pair_left)},

  {apply mk_inj_of_inj, from Œª _ _ _, cohen_real.inj ‚Äπ_‚Ä∫},
end
